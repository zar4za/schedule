#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import random
from datetime import datetime, timedelta

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# =============== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===============
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)


# =============== ¬´–ü–ê–ú–Ø–¢–¨¬ª –ú–û–ö-–•–†–ê–ù–ò–õ–ò–©–ï ===============
# (–≤–º–µ—Å—Ç–æ Redis; –ø—Ä–æ—Å—Ç–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
users = {}          # telegram_id -> –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, –§–ò–û)
availability = {}   # telegram_id -> —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (start_datetime, end_datetime)
last_schedule = {}  # telegram_id -> —Å—Ç—Ä–æ–∫–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º


# =============== –°–¢–ï–ô–¢–´ –î–õ–Ø ConversationHandler ===============
AWAITING_INTERNAL_ID = 0
AWAITING_UNAVAILABLE = 1


# =============== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===============
def parse_unavailable_period(text: str):
    """
    –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: 'YYYY-MM-DD HH:MM ‚Äì YYYY-MM-DD HH:MM'
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (start_datetime, end_datetime) –∏–ª–∏ None, –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è.
    """
    try:
        parts = text.split('‚Äì')
        if len(parts) != 2:
            return None
        start_str = parts[0].strip()
        end_str = parts[1].strip()
        start_dt = datetime.strptime(start_str, '%Y-%m-%d %H:%M')
        end_dt = datetime.strptime(end_str, '%Y-%m-%d %H:%M')
        if end_dt <= start_dt:
            return None
        return start_dt, end_dt
    except Exception:
        return None


def format_schedule_for_week(telegram_id: int, week_start: datetime) -> str:
    """
    –≠–º—É–ª—è—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:
    - –±–µ—Ä—ë–º –¥–∞—Ç—ã –æ—Ç week_start (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫) –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è
    - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ doctor –≤ –ø–µ—Ä–∏–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    - –µ—Å–ª–∏ –ø–æ–ø–∞–¥–∞–µ—Ç, –æ—Ç–º–µ—á–∞–µ–º '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
    - –∏–Ω–∞—á–µ ‚Äî –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å–º–µ–Ω—É (–î–µ–Ω—å/–ù–æ—á—å/–í—ã—Ö–æ–¥–Ω–æ–π)
    """
    periods = availability.get(telegram_id, [])
    schedule_lines = []
    for i in range(7):
        day = week_start + timedelta(days=i)
        busy = False
        for (s, e) in periods:
            if s.date() <= day.date() <= e.date():
                busy = True
                break

        day_name = day.strftime('%A %d.%m.%Y')
        if busy:
            schedule_lines.append(f"{day_name}: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            choice = random.choice(['–î–µ–Ω—å (09:00‚Äì17:00)', '–ù–æ—á—å (21:00‚Äì07:00)', '–í—ã—Ö–æ–¥–Ω–æ–π'])
            schedule_lines.append(f"{day_name}: {choice}")

    header = (
        f"–í–∞—à –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é —Å {week_start.strftime('%d.%m.%Y')} "
        f"–ø–æ {(week_start + timedelta(days=6)).strftime('%d.%m.%Y')}:\n\n"
    )
    return header + "\n".join(schedule_lines)


# =============== –•–≠–ù–î–õ–ï–†–´ ===============

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    /start: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ '–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID'.
    –ò–Ω–∞—á–µ –≤—ã–¥–∞—ë–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
    """
    user_id = update.effective_user.id
    if user_id not in users:
        text = (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω –∫–ª–∏–Ω–∏–∫–∏ ¬´–ó–¥–æ—Ä–æ–≤—ã–π –†–µ–±—ë–Ω–æ–∫¬ª.\n\n"
            "–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Å–∏—Å—Ç–µ–º–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID (–§–ò–û –∏–ª–∏ —É—Å–ª–æ–≤–Ω—ã–π –Ω–æ–º–µ—Ä –≤—Ä–∞—á–∞),\n"
            "—á—Ç–æ–±—ã —è –º–æ–≥(–ª–∞) —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—Å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ 1–°.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤¬ª –∏–ª–∏ ¬´–í—Ä–∞—á-12¬ª."
        )
        await update.message.reply_text(text)
        return AWAITING_INTERNAL_ID
    else:
        name = users[user_id]
        keyboard = [
            [KeyboardButton('/unavailable'), KeyboardButton('/reschedule')],
            [KeyboardButton('/my_schedule')],
        ]
        await update.message.reply_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}! üéâ\n"
            "–í–≤–µ–¥–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        )
        return ConversationHandler.END


async def register_internal_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ¬´–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –≤—Ä–∞—á–∞¬ª (–§–ò–û, –Ω–æ–º–µ—Ä), –∫–ª–∞–¥—ë–º –≤ users[user_id].
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –≤ availability –∏ last_schedule.
    """
    user_id = update.effective_user.id
    text = update.message.text.strip()
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –≤—ã –±—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤ 1–°, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π ID.
    users[user_id] = text
    availability[user_id] = []
    last_schedule[user_id] = None

    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ, {text}! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/unavailable ‚Äî —É–∫–∞–∑–∞—Ç—å –ø–µ—Ä–∏–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏\n"
        "/reschedule ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "/my_schedule ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    )
    return ConversationHandler.END


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /help ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
    """
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/unavailable ‚Äî —É–∫–∞–∑–∞—Ç—å –ø–µ—Ä–∏–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏\n"
        "/reschedule ‚Äî –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Å—á—ë—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
        "/my_schedule ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    /cancel ‚Äî –ø—Ä–µ—Ä—ã–≤–∞–µ–º ConversationHandler –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")
    return ConversationHandler.END


async def unavailable_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ /unavailable: –ø—Ä–æ—Å–∏–º –≤—Ä–∞—á–∞ –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–∏–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏.
    """
    user_id = update.effective_user.id
    if user_id not in users:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.")
        return ConversationHandler.END

    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú ‚Äì –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n"
        "–ü—Ä–∏–º–µ—Ä: 2025-04-03 08:00 ‚Äì 2025-04-05 20:00\n\n"
        "–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )
    return AWAITING_UNAVAILABLE


async def unavailable_receive(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—É—á–∏–ª–∏ —Å—Ç—Ä–æ–∫—É –æ—Ç –≤—Ä–∞—á–∞, –ø–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥ –≤ availability.
    """
    user_id = update.effective_user.id
    text = update.message.text.strip()
    period = parse_unavailable_period(text)
    if period is None:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return AWAITING_UNAVAILABLE

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥
    availability[user_id].append(period)
    start_dt, end_dt = period
    await update.message.reply_text(
        f"‚úÖ –í–∞—à –ø–µ—Ä–∏–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n"
        f"{start_dt.strftime('%d.%m.%Y %H:%M')} ‚Äì {end_dt.strftime('%d.%m.%Y %H:%M')}\n\n"
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –ø–µ—Ä–∏–æ–¥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ.\n"
        "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )
    return ConversationHandler.END


async def reschedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /reschedule ‚Äî ¬´–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ—Å—á—ë—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è¬ª –∏ –≤—ã–¥–∞—ë–º –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç.
    –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å publish –≤ Redis, –∂–¥—ë–º Scheduler, —á–∏—Ç–∞–µ–º –∏–∑ Redis.
    –ó–¥–µ—Å—å —ç–º—É–ª–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ¬´–Ω–∞—Å—Ç–æ—è—â–µ–≥–æ¬ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    """
    user_id = update.effective_user.id
    if user_id not in users:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.")
        return

    await update.message.reply_text("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–µ—Ä–µ—Å—á—ë—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è‚Ä¶ ‚è≥")

    # –ò–º–∏—Ç–∏—Ä—É–µ–º ¬´–ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞¬ª
    now = datetime.now()
    # –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —Ç–æ week_start = —Å–µ–≥–æ–¥–Ω—è; –∏–Ω–∞—á–µ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    delta_days = (7 - now.weekday()) % 7
    week_start = (now + timedelta(days=delta_days)).replace(hour=0, minute=0, second=0, microsecond=0)

    # –≠–º—É–ª—è—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ ‚Äì –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ OR-Tools
    text_sched = format_schedule_for_week(user_id, week_start)
    last_schedule[user_id] = text_sched

    await update.message.reply_text(text_sched)


async def my_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /my_schedule ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–¥–∞—ë–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –≤ last_schedule —Ç–µ–∫—Å—Ç. 
    –ï—Å–ª–∏ –µ—â—ë –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å /reschedule.
    """
    user_id = update.effective_user.id
    if user_id not in users:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.")
        return

    sched = last_schedule.get(user_id)
    if not sched:
        await update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n"
            "–í–≤–µ–¥–∏—Ç–µ /reschedule, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å."
        )
    else:
        await update.message.reply_text(sched)


def main():
    # –ó–¥–µ—Å—å –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç @BotFather
    TOKEN = "–í–ê–®_TELEGRAM_BOT_TOKEN"

    # ================= –°–æ–∑–¥–∞—ë–º Application =================
    application = Application.builder().token(TOKEN).build()

    # ================= ConversationHandler –¥–ª—è /start =================
    conv_start = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            AWAITING_INTERNAL_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_internal_id)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(conv_start)

    # ================= ConversationHandler –¥–ª—è /unavailable =================
    conv_unavail = ConversationHandler(
        entry_points=[CommandHandler("unavailable", unavailable_start)],
        states={
            AWAITING_UNAVAILABLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, unavailable_receive)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(conv_unavail)

    # ================= –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã =================
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("reschedule", reschedule))
    application.add_handler(CommandHandler("my_schedule", my_schedule))
    application.add_handler(CommandHandler("cancel", cancel))

    # =============================================================
    # –ó–∞–ø—É—Å–∫–∞–µ–º ¬´–¥–æ–ª–≥–∏–π –æ–ø—Ä–æ—Å¬ª (Long Polling)
    application.run_polling()


if __name__ == "__main__":
    main()
